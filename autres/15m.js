// Liste des cryptos
const cryptos = [
    "1INCH",
    "AAVE",
    "ACE",
    "ACH",
    "ACX",
    "ACT",
    "ADA",
    "AEVO",
    "AGIX",
    "AGLD",
    "AI",
    "AI16Z",
    "AIXBT",
    "AERGO",
    "ALCHE",
    "ALGO",
    "ALICE",
    "ALPACA",
    "ALPHA",
    "ALT",
    "AMB",
    "ANKR",
    "APE",
    "API3",
    "APT",
    "AR",
    "ARB",
    "ARK",
    "ARKM",
    "ARPA",
    "ANIME",
    "ASTR",
    "ATA",
    "ATOM",
    "AUCTION",
    "AVAAI",
    "AVA",
    "AVAX",
    "AXL",
    "AXS",
    "B3",
    "BAN",
    "BANANA",
    "BANANAS31",
    "BAND",
    "BAT",
    "BAKE",
    "BB",
    "BCH",
    "BEAMX",
    "BEL",
    "BERA",
    "BICO",
    "BID",
    "BIGTIME",
    "BIO",
    "BMT",
    "BNB",
    "BNT",
    "BNX",
    "BOME",
    "BOND",
    "BONK",
    "BR",
    "BRETT",
    "BROCCOLI714",
    "BROCCOLIF3B",
    "BSV",
    "BSW",
    "BTC",
    "BTCDOM",
    "BABY",
    "BABYDOGE",
    "BLUR",
    "BLZ",
    "CAKE",
    "CAT",
    "CATI",
    "C98",
    "CELO",
    "CELR",
    "CETUS",
    "CFX",
    "CGPT",
    "CHESS",
    "CHILLGUY",
    "CHR",
    "CHZ",
    "CKB",
    "COMBO",
    "COMP",
    "COOKIE",
    "COS",
    "COTI",
    "COW",
    "CRV",
    "CTK",
    "CTSI",
    "CVX",
    "CVC",
    "CYBER",
    "D",
    "DAR",
    "DASH",
    "DEGEN",
    "DEGO",
    "DENT",
    "DEXE",
    "DF",
    "DGB",
    "DIA",
    "DODOX",
    "DOGE",
    "DOGS",
    "DOT",
    "DUSK",
    "DYDX",
    "DYM",
    "EDU",
    "EGLD",
    "EIGEN",
    "EOS",
    "ENA",
    "ENJ",
    "ENS",
    "EPIC",
    "ETC",
    "ETH",
    "ETHFI",
    "ETHW",
    "FARTCOIN",
    "FET",
    "FIDA",
    "FIL",
    "FIO",
    "FLM",
    "FLOKI",
    "FLOW",
    "FLUX",
    "FORM",
    "FORTH",
    "FRONT",
    "FTM",
    "FTT",
    "FUN",
    "FXS",
    "G",
    "GALA",
    "GAS",
    "GHST",
    "GLM",
    "GLMR",
    "GMT",
    "GMX",
    "GOAT",
    "GPS",
    "GRASS",
    "GRT",
    "GRIFFAIN",
    "GTC",
    "GUN",
    "GUNTHY",
    "HBAR",
    "HFT",
    "HIFI",
    "HIGH",
    "HIPPO",
    "HIVE",
    "HMSTR",
    "HOT",
    "HOOK",
    "ICX",
    "ID",
    "IDEX",
    "ILV",
    "IMX",
    "INJ",
    "IOST",
    "IOTA",
    "IOTX",
    "IO",
    "IP",
    "JASMY",
    "JELLYJELLY",
    "JOE",
    "JTO",
    "JUP",
    "KAIA",
    "KAITO",
    "KAS",
    "KAVA",
    "KDA",
    "KEY",
    "KMNO",
    "KLAY",
    "KNC",
    "KOMA",
    "KSM",
    "LDO",
    "LEVER",
    "LINA",
    "LINK",
    "LISTA",
    "LIT",
    "LOKA",
    "LOOM",
    "LPT",
    "LQTY",
    "LRC",
    "LSK",
    "LTC",
    "LUNA2",
    "LUNC",
    "LAYER",
    "LUMIA",
    "MAGIC",
    "MANA",
    "MANTA",
    "MASK",
    "MAV",
    "MAVIA",
    "MBOX",
    "MDT",
    "ME",
    "MELANIA",
    "MEME",
    "METIS",
    "MINA",
    "MEW",
    "MKR",
    "MLN",
    "MOCA",
    "MOG",
    "MOODENG",
    "MORPHO",
    "MOVR",
    "MOVE",
    "MTL",
    "MUBARAK",
    "MYRO",
    "NEAR",
    "NEO",
    "NEIRO",
    "NEIROETH",
    "NFP",
    "NIL",
    "NKN",
    "NMR",
    "NOT",
    "NTRN",
    "OCEAN",
    "OGN",
    "OM",
    "OMG",
    "OMNI",
    "ONDO",
    "ONE",
    "ONG",
    "ONT",
    "OP",
    "OXT",
    "ORDI",
    "ORBS",
    "ORCA",
    "PARTI",
    "PAXG",
    "PEOPLE",
    "PENDLE",
    "PENGU",
    "PEPE",
    "PERP",
    "PHA",
    "PHB",
    "PIPPIN",
    "PIXEL",
    "PLUME",
    "PNUT",
    "POL",
    "POLYX",
    "PONKE",
    "POPCAT",
    "PORTAL",
    "POWR",
    "PROM",
    "PYTH",
    "QNT",
    "QTUM",
    "QUICK",
    "RAD",
    "RARE",
    "RAY",
    "RAYSOL",
    "RATS",
    "RDNT",
    "REEF",
    "REI",
    "REN",
    "RENDER",
    "REZ",
    "RIF",
    "RLC",
    "RNDR",
    "RONIN",
    "ROSE",
    "RPL",
    "RSR",
    "RUNE",
    "RVN",
    "S",
    "SAFE",
    "SAGA",
    "SAND",
    "SANTOS",
    "SAT",
    "SATS",
    "SC",
    "SCR",
    "SCRT",
    "SEI",
    "SFP",
    "SHIB",
    "SHELL",
    "SIREN",
    "SKL",
    "SLP",
    "SLERF",
    "SNX",
    "SOL",
    "SOLV",
    "SONIC",
    "SPELL",
    "SPX",
    "SRM",
    "SSV",
    "STEEM",
    "STMX",
    "STORJ",
    "STPT",
    "STRAX",
    "STRK",
    "STG",
    "STX",
    "SUN",
    "SUI",
    "SUPER",
    "SUSHI",
    "SXP",
    "SYN",
    "SYS",
    "T",
    "TAO",
    "THETA",
    "THE",
    "TIA",
    "TLM",
    "TNSR",
    "TON",
    "TOKEN",
    "TRB",
    "TRU",
    "TRUMP",
    "TRX",
    "TST",
    "TURBO",
    "TUT",
    "TWT",
    "UMA",
    "UNFI",
    "UNI",
    "USUAL",
    "USTC",
    "VANRY",
    "VANA",
    "VET",
    "VELODROME",
    "VIC",
    "VINE",
    "VIRTUAL",
    "VOXEL",
    "VTHO",
    "VVV",
    "W",
    "WAL",
    "WAVES",
    "WAXP",
    "WHY",
    "WIF",
    "WLD",
    "WOO",
    "X",
    "XAI",
    "XEC",
    "XEM",
    "XLM",
    "XRP",
    "XTZ",
    "XVG",
    "XVS",
    "YFI",
    "YGG",
    "ZEC",
    "ZEN",
    "ZEREBRO",
    "ZETA",
    "ZIL",
    "ZK",
    "ZRO",
    "ZRX",
  ];

  
  // Fonction pour récupérer les données de toutes les cryptos
  function fetchAllCryptoData() {
    cryptos.forEach(crypto => {
      fetchCryptoDataAtTime(crypto, 3, 1); // Cellule pour il y a 3 ans
      fetchCryptoDataAtTime(crypto, 2, 2); // Cellule pour il y a 2 ans
      fetchCryptoDataAtTime(crypto, 1, 3); // Cellule pour l'année dernière
    });
  }
  
  // Appel de la fonction pour lancer la récupération des données pour toutes les cryptos
  fetchAllCryptoData();
  
  // Fonction asynchrone pour récupérer les données d'une crypto à une année spécifique
  async function fetchCryptoDataAtTime(symbol, yearOffset, cellIndex) {
      // Récupérer la date et l'heure actuelles
      const currentDate = new Date();
  
      // Calculer l'année cible en fonction de l'offset
      const targetYear = currentDate.getFullYear() - yearOffset;
  
      // Ajuster l'année de la date cible
      currentDate.setFullYear(targetYear);
      
      // Convertir la date cible en timestamp (date actuelle mais avec une année différente)
      const startTime = currentDate.getTime(); 
  
      try {
          const response = await fetch(
              `https://api.binance.com/api/v3/klines?symbol=${symbol}USDT&interval=15m&startTime=${startTime}&limit=1`
          );
          const data = await response.json();
  
          if (data.length === 0) {
              console.log(`Aucune donnée trouvée pour ${symbol} à ${targetYear}`);
              return;
          }
  
          const openPrice = parseFloat(data[0][1]);
          const closePrice = parseFloat(data[0][4]);
          const variation = ((closePrice - openPrice) / openPrice) * 100;
  
          const dateTime = new Date(data[0][0]);
          const options = { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric" };
  
          const formattedDate = dateTime.toLocaleDateString("fr-FR", options);
  
          // Insérer la variation dans la cellule correspondante du tableau
          const cryptoRow = document.getElementById(symbol);
          const variationCell = cryptoRow.insertCell(cellIndex); // Insérer la cellule dans la colonne correspondante
          variationCell.textContent = `${formattedDate} : ${variation.toFixed(2)}%`;
  
          // Ajouter la classe "positive" ou "negative" en fonction de la variation
          if (variation > 0) {
              variationCell.classList.add("positive");
          } else if (variation < 0) {
              variationCell.classList.add("negative");
          }
  
      } catch (error) {
          console.error(
              `Erreur lors de la récupération des données pour ${symbol} à ${targetYear}:`,
              error
          );
      }
  }
  